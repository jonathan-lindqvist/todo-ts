{"version":3,"sources":["Todo.tsx","TodoForm.tsx","App.tsx","index.tsx"],"names":["Todo","todo","index","completeTodo","removeTodo","style","textDecoration","isCompleted","className","text","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","todos","setTodos","newTodos","splice","map","key","ReactDOM","render","document","getElementById"],"mappings":"+LAYaA,EAA4B,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,WACpE,OACE,yBAAKC,MAAO,CAAEC,eAAgBL,EAAKM,YAAc,eAAiB,IAAMC,UAAU,QAC/EP,EAAKQ,KACN,6BACE,4BAAQC,QAAS,kBAAMP,EAAaD,KAApC,YACA,4BAAQQ,QAAS,kBAAMN,EAAWF,KAAlC,QCZKS,EAAoC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EACpCC,mBAAS,IAD2B,mBACvDC,EADuD,KAChDC,EADgD,KAU9D,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,IACJF,EAAQE,GACRC,EAAS,OAKP,2BAAOI,KAAK,OAAOX,UAAU,QAAQY,YAAY,cAAcN,MAAOA,EAAOO,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,YCuBrGS,EAhCO,WAAO,IAAD,EACAV,mBAAkB,IADlB,mBACnBW,EADmB,KACZC,EADY,KAQpBtB,EAAe,SAACD,GACpB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASxB,GAAOK,aAAc,EAC9BkB,EAASC,IAGLtB,EAAa,SAACF,GAClB,IAAMwB,EAAQ,YAAOF,GACrBE,EAASC,OAAOzB,EAAO,GACvBuB,EAASC,IAGX,OACE,yBAAKlB,UAAU,OACb,yBAAKA,UAAU,aACZgB,EAAMI,KAAI,SAAC3B,EAAMC,GAAP,OACT,kBAAC,EAAD,CAAM2B,IAAK3B,EAAOA,MAAOA,EAAOD,KAAMA,EAAOE,aAAcA,EAAcC,WAAYA,OAEvF,kBAAC,EAAD,CAAUQ,QAvBA,SAACH,GACf,IAAMiB,EAAQ,sBAAOF,GAAP,CAAc,CAACf,OAAMF,aAAa,KAChDkB,EAASC,SCTbI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.e3ffc508.chunk.js","sourcesContent":["import React from 'react';\n\ninterface TodoProps {\n  todo: {\n    text: string,\n    isCompleted: boolean\n  },\n  index: number,\n  completeTodo: (index: number) => void,\n  removeTodo: (index: number) => void,\n}\n\nexport const Todo: React.FC<TodoProps> = ({todo, index, completeTodo, removeTodo}) => {\n  return (\n    <div style={{ textDecoration: todo.isCompleted ? 'line-through' : '' }} className=\"todo\">\n      {todo.text}\n      <div>\n        <button onClick={() => completeTodo(index)}>Complete</button>\n        <button onClick={() => removeTodo(index)}>X</button>\n      </div>\n    </div>\n  )\n}","import React, { useState } from 'react';\n\ninterface TodoFormProps {\n  addTodo: (text:string) => void\n}\n\nexport const TodoForm: React.FC<TodoFormProps> = ({addTodo}) => {\n  const [value, setValue] = useState(\"\")\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    if(!value) return\n    addTodo(value)\n    setValue(\"\")\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" className=\"input\" placeholder=\"Add Todo...\" value={value} onChange={e => setValue(e.target.value)} />\n    </form>\n  )\n}","import React, { useState } from 'react';\nimport {Todo} from './Todo'\nimport {TodoForm} from './TodoForm'\n\ninterface Todos {\n  text: string,\n  isCompleted: boolean\n}\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todos[]>([])\n\n  const addTodo = (text: string) => {\n    const newTodos = [...todos, {text, isCompleted: false}]\n    setTodos(newTodos)\n  }\n\n  const completeTodo = (index: number) =>{\n    const newTodos = [...todos]\n    newTodos[index].isCompleted = true\n    setTodos(newTodos)\n  }\n\n  const removeTodo = (index: number) => {\n    const newTodos = [...todos]\n    newTodos.splice(index, 1)\n    setTodos(newTodos)\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo key={index} index={index} todo={todo}  completeTodo={completeTodo} removeTodo={removeTodo}/>\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}